AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Whatsapp webhook to persiste received messages

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  AppName:
    Description: The name of the application
    Type: String
  UserAccessTokenParam:
    Description: This is the token that authorize send whatsapp messages
    Type: String
  VerifyTokenParam:
    Description: This is the verify token value from Meta webhook set up.
    Type: String
  AssistancesTableNameParam: # needed for updating readed
    Description: The name of the table for store assistances.
    Type: String
  NotificationsTableNameParam:
    Default: wa_Notifications
    Description: The name of the table for store whatsapp notifications.
    Type: String
  NotificationsTableStreamArnParam:
    Description: Notifications table stream
    Type: String
  BucketNameParam:
    Description: Bucket name
    Type: String
  DynamoDBEndpointParam:
    Type: String
    Description: URL to access dynamodb.
  StageParam:
    Description: The name of the stage
    Type: String
    Default: beta
  IssuerParam:
    Description: The token issuer
    Type: String
  UserPoolClientRefParam:
    Description: The cognito user pool client
    Type: String

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100

Resources:
  WhatsappApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageParam
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub ${AppName} - Whatsapp API
        paths: {}
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - OPTIONS
          - GET
          - POST
          - DELETE
          - PUT
          - PATCH
        AllowOrigins:
          - "https://*"
          - "http://*"
        AllowCredentials: true
        MaxAge: 600
      Auth:
        Authorizers:
          OAuth2Authorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Ref IssuerParam
              audience:
                - !Ref UserPoolClientRefParam
        EnableIamAuthorizer: true
        DefaultAuthorizer: OAuth2Authorizer

  WebhookGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers
      Handler: handler_webhook_get.handler
      Description: This Lambda function is responsible for returning info on whatsapp verification request (setting up whatsapp endpoint)
      Environment:
        Variables:
          VERIFY_TOKEN: !Ref VerifyTokenParam
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /whatsapp
            Method: GET
            ApiId: !Ref WhatsappApiGateway
            Auth:
              Authorizer: NONE

  WebhookPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers
      Handler: handler_webhook_post.handler
      Description: This lambda function is responsible for receiving whatsapp events and store it
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTableNameParam
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTableNameParam
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpointParam
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /whatsapp
            Method: POST
            ApiId: !Ref WhatsappApiGateway
            Auth:
              Authorizer: NONE

  MessageSendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers
      Handler: handler_message_send.handler
      Description: Send a message to whatsapp by proxing the whatsapp API
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTableNameParam
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:AdminGetUser
              Resource: "*"
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTableNameParam
          USER_ACCESS_TOKEN: !Ref UserAccessTokenParam
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpointParam
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /whatsapp/{phoneNumberId}/messages
            Method: POST
            ApiId: !Ref WhatsappApiGateway
            Auth:
              Authorizer: OAuth2Authorizer

  MessageMarkAsReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers
      Handler: handler_message_mark_as_read.handler
      Description: Send a message to whatsapp by proxing the whatsapp API
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssistancesTableNameParam
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref AssistancesTableNameParam
          USER_ACCESS_TOKEN: !Ref UserAccessTokenParam
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpointParam
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /whatsapp/{phoneNumberId}/messages
            Method: PATCH
            ApiId: !Ref WhatsappApiGateway
            Auth:
              Authorizer: OAuth2Authorizer

  MessageListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers
      Handler: handler_message_list.handler
      Description: Return a list of contact messages
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTableNameParam
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTableNameParam
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpointParam
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /whatsapp/{partitionKey}/messages
            Method: GET
            ApiId: !Ref WhatsappApiGateway
            Auth:
              Authorizer: OAuth2Authorizer

  DownloadMediaTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: triggers
      Handler: handler_download_media.handler
      Description: Download media from meta cloud to S3
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketNameParam
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketNameParam
          USER_ACCESS_TOKEN: !Ref UserAccessTokenParam
      Events:
        Trigger:
          Type: DynamoDB
          Properties:
            Stream: !Ref NotificationsTableStreamArnParam
            StartingPosition: TRIM_HORIZON
            BatchSize: 20
            MaximumRetryAttempts: 3
